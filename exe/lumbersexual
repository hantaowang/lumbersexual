#!/usr/bin/env ruby

require "lumbersexual"
require "slop"
require "uri"

ruby_version = RUBY_VERSION.split('.').join.to_i
if ruby_version >= 220
  require 'etc'
  nprocessors = Etc.nprocessors
else
  nprocessors = %x[ nproc ]
end

options = Slop.parse do |o|
  o.bool    '-a', '--all', 'search all indices rather than today\'s in latency mode', default: nil
  o.string  '-D', '--dictionaryfile', 'path to dictionary file (default: /etc/dictionaries-common/words)', default: '/words'
  o.array   '-f', '--facilities', 'additional comma-seperated facilities', default: []
  o.bool    '-h', '--help', 'print this message'
  o.integer '-i', '--interval', 'in latency mode, the interval in seconds to sleep between index queries (default 0.1)', default: 0.1
  o.bool    '-la', '--latency', 'run in latency mode (default: no)', default: false
  o.bool    '-lo', '--load', 'run in load generation mode (default: no)', default: false
  o.bool    '-L', '--log', 'in latency mode log elasticsearch output (default: no)', default: false
  o.integer '-M', '--maxwords', 'maximum number of words per message (default: 20)', default: 20
  o.integer '-m', '--minwords', 'minimum number of words per message (default: 3)', default: 3
  o.array   '-p', '--priorities', 'additional comma-seperated priorities', default: []
  o.integer '-r', '--rate', 'messages per second per thread (default: 50, 0 for unlimited)', default: 50
  o.string  '-s', '--statsdhost', 'send statsd telemetry to the named host (default: off)', default: nil
  o.integer '-T', '--threads', 'number of threads (defaults to number of cores * 2)', default: nprocessors * 2
  o.integer '-t', '--timeout', 'length of execution. 0 for forever (default: 0)', default: 0
  o.string  '-u', '--uri', 'elasticsearch uri when run in latency mode (default: http://localhost:9200/)', default: URI::parse("http://localhost:9200/")
  o.integer '-c', '--count', 'number of messages to send (default: 500)', default: 500
  o.bool    '-U', '--udp', 'switches to a udp connection (default: false)', default: false
end

if options.help?
  puts options
  exit
end

options[:uri] = URI.parse(options[:uri].to_s)

trap('INT') {
  raise Interrupt
}

if options[:latency] and options[:load]
  require '/lumbersexual/lib/lumbersexual/plugin/load_latency.rb'
  plugin = Lumbersexual::Plugin::LoadLatency.new(options)
elsif options[:latency]
  require 'lumbersexual/plugin/latency'
  plugin = Lumbersexual::Plugin::Latency.new(options)
elsif options[:load]
  require 'lumbersexual/plugin/load_generator'
  plugin = Lumbersexual::Plugin::LoadGenerator.new(options)
else
  puts "Must specifiy load and/or latency"
  exit
end

begin
  plugin.perform
rescue Timeout::Error, Interrupt
  plugin.report
end

puts "Complete"
exit 0
