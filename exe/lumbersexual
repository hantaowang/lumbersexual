#!/usr/bin/env ruby

require "lumbersexual"
require "slop"
require "syslog"
require "benchmark"
require "thread"

options = Slop.parse do |o|
  o.string  '-D', '--dictionaryfile', 'path to dictionary file (default: /etc/dictionaries-common/words)', default: '/etc/dictionaries-common/words'
  o.integer '-t', '--timeout', 'length of execution. 0 for forever (default: 0)', default: 0
  o.integer '-T', '--threads', 'number of threads (defaults to number of cores)', default: Etc.nprocessors
  o.integer '-m', '--minwords', 'minimum number of words per message (default: 3)', default: 3
  o.integer '-M', '--maxwords', 'maximum number of words per message (default: 20)', default: 20
  o.array   '-p', '--priorities', 'additional comma-seperated priorities', default: []
  o.array   '-f', '--facilities', 'additional comma-seperated facilities', default: []
  o.integer '-r', '--rate', 'messages per second per thread (default: 0, unlimited)', default: 0
  o.bool    '-h', '--help', 'print this message' 
end

if options.help?
  puts options
  exit
end

trap('INT') {
  raise Interrupt
}

# Get our word corpus and define the priorities and facilities we can use
facilities = [ Syslog::LOG_ALERT, Syslog::LOG_CRIT, Syslog::LOG_ERR, Syslog::LOG_WARNING, Syslog::LOG_NOTICE, Syslog::LOG_INFO ]
options[:facilities].each { |f| facilities << Object.const_get('Syslog').const_get["LOG_#{f.upcase}"] }
priorities = [ Syslog::LOG_AUTHPRIV, Syslog::LOG_CRON, Syslog::LOG_DAEMON, Syslog::LOG_FTP, Syslog::LOG_LPR, Syslog::LOG_MAIL, Syslog::LOG_NEWS, Syslog::LOG_SYSLOG, Syslog::LOG_USER, Syslog::LOG_UUCP]
0..7.times { |n| priorities << Object.const_get('Syslog').const_get("LOG_LOCAL#{n}")}

words = []
File.open(options[:dictionaryfile]).each_line { |l| words << l.chomp }

case options[:rate]
when 0
 pause = 0.0
else
  pause = 1.0 / options[:rate]
end

puts "Loaded #{words.size} words"
puts "Timeout: #{options[:timeout]}"
puts "Threads: #{options[:threads]}"
puts "Rate per core: #{options[:rate]}/s"
puts "Total rate: #{options[:rate] * options[:threads]}/s"
puts "Minimum words per message: #{options[:minwords]}"
puts "Maximum words per message: #{options[:maxwords]}"
puts "Running ..."

# Run until we're done
global_count = 0
threads = []
mutex = Mutex.new
start_time = Time.now
puts Benchmark.measure {
  begin
    Timeout::timeout(options[:timeout]) {

      options[:threads].times do
        threads << Thread.new {
	  while true do
	    # Connect to syslog with some sane options and log a message
	    message = String.new
	    number_of_words = rand(options[:minwords]..options[:maxwords])
	    words.sample(number_of_words).each { |w| message << "#{w} " }
            ident = "lumbersexual-#{words.sample}"
            facility = facilities.sample
            priority = priorities.sample

            sleep pause
            mutex.synchronize {
	      syslog = Syslog.open(ident, Syslog::LOG_CONS | Syslog::LOG_NDELAY, facility)
	      Syslog.log(priority, message)
	      global_count += 1
	      Syslog.close
            }

	  end
        }
      end

      threads.each {|t| t.join}

    }

  rescue Timeout::Error, Interrupt
    end_time = Time.now
    elapsed = end_time - start_time
    puts "Sent: #{global_count}"
    puts "Elapsed time: #{elapsed}"
    puts "Messages per second: #{global_count / elapsed}"
    puts "Complete"
    exit 0
  end
}
